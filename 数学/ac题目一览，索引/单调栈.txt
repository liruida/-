解 见图片 1.jpg~ 3.jpg 

输入:
6
2 1 5 6 2 3

输出:
10

单调栈法

代码的巧妙设计之处是下标进栈。且len=n+2,数组左右设0，下标0入栈，h1>h0，1入栈；i=2,当h1>h2时，说明h2是右边第一个小于h1的，h2的下标恰为i,即所求的右值恰为i；找到后，h1的坐标出栈，代表h1出栈，而h1能入栈，说明它入栈前的栈顶元素恰是其要找的左值坐标，即为h1出栈后的top值。所以以h1为最低高度的矩形面积为 h1*（i-top-1）；后面元素重复此过程。但这种方法存在缺点，例如输入 2 3 3 3 2时，下标为4的3的左值找到的是下标为3的3，应该是下标为1的2.那此时得到的中间值面积为3*（5-3-1）=3，应该为3*（5-1-1）=9，但不影响最终结果。用左右分别寻找值数组入栈的方法不会发生这种错误。 

若将height[myStack.top()] >height[i]改为>=，则其右值会“缩水”，下标为2的3的右值将不会找到5，而是3，并且程序运行到i=6最后时，会有h0与h6的比较，未加=之前，不成立，i++<=6不成立，程序终止。而加了=，成立，0*（6-pop-1）,因为栈0弹出后下并无值，报错，此时需要 判空终止 if(myStack.empty()){break;}或if(myStack.size()==0){break;}

需要注意，循环从N+1结束是为了把最后一个元素和第一个元素也弹出来

https://blog.csdn.net/qq_25175067/article/details/79726846

#include <iostream>
#include <stack>
#include <stdlib.h>
using namespace std;
    // n：意义如题
    // height：高度数组，height[i]表示第i列的高度（下标从1开始），数组大小为n+2，其中height[0]和height[n+1]都为0
    // 返回值：题目所求答案，即最大面积
int getAnswer(int n, int *height) {
    int ans = 0;
    stack< int > myStack;
    /* push(0) 是为了能把第一个元素入栈 */
    myStack.push(0);
    /* 从N+1开始是为了把最后一个元素和第一个元素也弹出来 */
    for(int i = 1; i <= n+1; ++i){
        while ((height[myStack.top()] > height[i])) {
            int nowHeight = height[myStack.top()];
            myStack.pop();
            ans = max(ans, nowHeight * (i - myStack.top() - 1));
            /* 其实蛮不容易的QAQ，我这一句一直写错，后来重新看了一遍视频才写出来- - */
        }
        myStack.push(i);
    }
    return ans;
    /* 请在这里设计你的算法，并将答案返回 */
}
 
int main() {
    int n;
    cin >> n;
    
    int* height = new int[n + 2]();
    
    for(int i = 0; i < n+2; i++)  /*初始化，虽然不太有必要*/
        height[i] = 0;
    
    for (int i = 1; i <= n; ++i)
        cin >> height[i];
    
    cout << getAnswer(n, height) << endl;
     system("pause");
    delete[] height;
    return 0;
}



#include <iostream>  //https://blog.csdn.net/qq_25175067/article/details/79726846
#include <stack>
#include <stdlib.h>
using namespace std;
    // n：意义如题
    // height：高度数组，height[i]表示第i列的高度（下标从1开始），数组大小为n+2，其中height[0]和height[n+1]都为0
    // 返回值：题目所求答案，即最大面积
int getAnswer(int n, int *height) {
    int ans = 0;
    stack< int > myStack;
    /* push(0) 是为了能把第一个元素入栈 */
    myStack.push(0);
    /* 从N+1开始是为了把最后一个元素和第一个元素也弹出来 */
    for(int i = 1; i <= n+1; ++i){
        cout << "进入while前： "<<myStack.top()<< endl;  
        while ((height[myStack.top()] > height[i])) {
              cout << "i值： "<<i<< endl; 
             cout << "进入while后： "<<myStack.top()<< endl;  
            int nowHeight = height[myStack.top()];
            myStack.pop();
             cout << "弹出栈顶后的栈顶元素： "<<myStack.top()<< endl;
              cout << "中间值ans： "<<nowHeight * (i - myStack.top() - 1)<< endl;
              cout << "汇集 ： "<<nowHeight <<i<<myStack.top()<< endl;
              
            ans = max(ans, nowHeight * (i - myStack.top() - 1));
            cout << "ans ： "<<ans<< endl;
                                                            /* 其实蛮不容易的QAQ，我这一句一直写错，后来重新看了一遍视频才写出来- - */
        }
        myStack.push(i);
    }
    return ans;
    /* 请在这里设计你的算法，并将答案返回 */
}
 
int main() {
    int n;
    cin >> n;
    
    int* height = new int[n + 2]();
    
    for(int i = 0; i < n+2; i++)  /*初始化，虽然不太有必要*/
        height[i] = 0;
    
    for (int i = 1; i <= n; ++i)
        cin >> height[i];
    
    cout << getAnswer(n, height) << endl;
     system("pause");
    delete[] height;
    return 0;
}



此法为动态规划
#include<iostream>
#include <vector>
#include <algorithm>
using namespace std;
int solve(vector<int >data)
{
	int len = data.size();
	int max_area=0;
	for (int i = 0; i < len;i++)
	{
		int left_index = 0;
		int right_index = 0;
		for (; i - left_index >= 0;left_index++)
		{
			if (data[i - left_index]<data[i])
			{
				break;
			}
			
		}
		for (; i + right_index <= len - 1; right_index++)
		{
			if (data[i + right_index] < data[i])
			{
				break;
			}
		}
		int area = (1 + (left_index -1)+ (right_index-1))*data[i];
		max_area = max(max_area, area);
	}
	return max_area;
}
int main()
{


	int n;vector<int >data;
	while (cin>>n)
	{
		int temp;
		for (int i = 0; i < n;i++)
		{
			cin >> temp; data.push_back(temp);
		}
		int res = solve(data);
		cout << res << endl;
		  system("pause");
		//return 0;
	}
	return 0;
}


Java：https://blog.csdn.net/zxzxzx0119/article/details/81630814

https://blog.csdn.net/Two_Water/article/details/53004027

https://blog.csdn.net/LaoJiu_/article/details/50839746


https://blog.csdn.net/roufoo/article/details/78569554

双端队列（能从两端入，只能从一端出）
https://jingyan.baidu.com/album/a501d80cf952c1ec630f5ec3.html?picindex=2

https://blog.csdn.net/zlb872551601/article/details/77686651
