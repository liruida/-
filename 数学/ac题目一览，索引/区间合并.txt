合并重叠区间

输入 
3
1 3
2 6
8 10
输出
1 6
8 10


#include <iostream>
#include <vector>
#include <algorithm>
#include<sstream>       
#include<string> 
using namespace std;

typedef vector<pair<int, int> > RangeList;

RangeList cover(const RangeList& intervals) {
    int left = intervals[0].first, right = intervals[0].second;
    RangeList result;

    for (int i = 1; i < intervals.size(); ++i) {
        // 前面自成一个区间，那么就此分开
        if (intervals[i].first > right) {
            result.push_back(make_pair(left, right));
            left = intervals[i].first;
            right = intervals[i].second;
        } else if (intervals[i].second > right) {
            right = intervals[i].second;
        //因为已经排好序， intervals[i].first 必定大于left ，故无需判断此。 此时，处于的情况是： 1 3 ；2 6  合并的情况只有一种，即是6>3时
       }
         /* else if (intervals[i].first <left) {
            left = intervals[i].first;
            
        }*/
    }
    result.push_back(make_pair(left, right));

    return result;
}

void display(const RangeList& intervals) {
    for (int i = 0; i < intervals.size(); ++i)
        cout << intervals[i].first << ' ' << intervals[i].second << endl;
    cout << endl;
}

int main() {
    RangeList intervals;
    int n, start, end;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> start >> end;
        intervals.push_back(make_pair(start, end));
    }
    sort(intervals.begin(), intervals.end()); //因为题主要比数据大小，所以首先想到排序。排序可以简化很多情况，按左值 MAP key排序

    display(intervals);
    system("pause");
    RangeList result = cover(intervals);
    display(result);
    system("pause");
    return 0;
}


算法参考：
https://blog.csdn.net/Jacketinsysu/article/details/52367833

typedef vector<pair<int, int> > RangeList; 定义一个一维数组其中元素是map的数据结构
(类似于Java 的list.add(map) https://blog.csdn.net/qq_24877569/article/details/52154507)
pair<int, int>  相当于Java中的map，访问方法：第一个数据:(*iter).first；第二个数据:(*iter).second。插入数据：make_pair(n, m)

vector插入数据push_back（).

sort(intervals.begin(), intervals.end());此方法遍历数组且根据map.first排序，内部采取快排，时间复杂度O(nlogn)。


遍历一遍时间复杂度O(n)。故整个程序时间复杂度O（n^2logn）。跟区间端点的覆盖范围（区间长度）没关系。 与区间数据大小和区间个数有关。 

参考链接：
https://blog.csdn.net/linxihe123/article/details/70173476


当输入要求改为
3
1，10；32，45
78，94；5，16
80，100；200，220；16，32

程序输入为：
int main() {
    RangeList intervals;
    int n, start, end;
    cin >> n;
    for (int i = 0; i <n+1; i++) {  //n需要 +1，第一次读取了cin >> n 之后的换行符 
        string s;
        getline(cin, s);//读一行字符串 遇到换行符才结束
        istringstream is (s);//istringstream对象可以绑定一行字符串，然后以空格为分隔符把该行分隔开来。

        int inter1, inter2;
        char ch;
        while (is >> inter1 >> ch >> inter2){         //输入时，不一定要是； ，隔开，只要是字符隔开就行
            start = inter1;
            end = inter2;
            intervals.push_back(make_pair(start, end));
            
        }
}

    sort(intervals.begin(), intervals.end()); //因为题主要比数据大小，所以首先想到排序。排序可以简化很多情况，按左值 MAP key排序

    display(intervals);
    system("pause");
    RangeList result = cover(intervals);
    display(result);
    system("pause");
    return 0;
}


java版 输入与解

/*
 *  自己写一个数据结构，然后对这个数据结构排序.
 */
 
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;
 
public class no2 {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int m = Integer.parseInt(in.nextLine());
		ArrayList<Interval> input = new ArrayList<>();
		
		for(int i = 0; i < m; i++){
			String[] errorsClassifiedByEditors = in.nextLine().split(";");
			for(int j = 0; j < errorsClassifiedByEditors.length; j++){
				String[] errors = errorsClassifiedByEditors[j].split(",");
				input.add(new Interval(Integer.parseInt(errors[0]), Integer.parseInt(errors[1])));
			}
		}
		in.close();
		
		Collections.sort(input,new Comparator<Interval>(){
			@Override
			public int compare(Interval o1, Interval o2) {
				return o1.start - o2.start;
			}	
		});
		
		Interval prev = null;
		ArrayList<Interval> results = new ArrayList<>();
		for(Interval item : input){
			if(prev == null || item.start > prev.end){
				results.add(item);
				prev = item;
			}else if(prev.end < item.end){
				prev.end = item.end;
			}
		}
	 
		int count = 0;
		for(Interval item : results){
			if(count == results.size() - 1){
				System.out.print(item.start + "," + item.end);
			}else{
				System.out.print(item.start + "," + item.end + ";");
			}
			count ++;
		}
		
		
	}
 
}
 
class Interval{
	int start;
	int end;
	
	public Interval(int start, int end){
		this.start = start;
		this.end = end;
	}
}
 


