寻找二叉树两个节点的最近公共祖先
https://www.jianshu.com/p/e647ecbec500

熟练树的操作与遍历利于字符表达式等的借助树运算，而并查集的核心是借助了树的形状特征，比较树根节点即可。

树可理解为两个栈 两个队列等。它的数据结构特征符合大量算法特征，且很简洁。

就像算法经常用到等效替代，递推的思想一样“流行”。

//http://blog.sina.com.cn/s/blog_77dc9e0801013y9p.html
#include <cstdio>
#include <iostream>
#include <cstring>
using namespace std;
#define MAX 105

struct node
{
 int v;
 int next;
}edges[MAX*MAX];

int n, m;
int p[MAX][20], deep[MAX];
int first[MAX], num;

inline void add(int u,int v)
{
 edges[num].v = v;
 edges[num].next = first[u];
 first[u] = num++;
}

void read_graph()
{
 memset(first,-1,sizeof(first));
 memset(p,0,sizeof(p));
 memset(deep,0,sizeof(deep));
 num = 0;
 int i, j, t;
 int v;
 for(i = 1; i <= n; ++i)
 {
  scanf("%d",&t);
  for(j = 1; j <= t; ++j)
  {
   scanf("%d",&v);
   add(i,v);
  }
 }
}

void dfs(int u)
{
 if(first[u] == -1) return ;
 for(int e = first[u]; e  != -1; e = edges[e].next)
 {
  int v = edges[e].v;
  p[v][0] = u;
  int m = u;
  deep[v] = deep[u]+1;
  for(int j = 0; p[m][j] != 0; ++j)
  {
   p[v][j+1] = p[m][j]; //公式p[v][j] = p[ p[v][j-1] ][j-1];
   m = p[m][j];  // m: 相当于上面公式p[v][j-1];
  }
  dfs(v);
 }
}

int LCA(int x,int y)
{
 int m, k;
 if(x == y) return x;
 if(deep[x] < deep[y])
 {
  m = x;
  x = y;
  y = m;
 }
 m = deep[x] - deep[y];
 k = 0;
 while( m ) //调整x和y的深度一样
 {
  if(m & 1) x = p[x][k];
  m >>= 1;
  k++;
 }
 if(x == y) return x;
 k = 0;
 while(x != y) //二分查找, 向上调整寻找最近公共祖先.
 {
  if( p[x][k] != p[y][k] || p[x][k] == p[y][k] && k == 0)
  { //如果p[x][k] != p[y][k], 说明p[x][k]节点仍然在所求祖先下面. 继续向上调整
    //如果相等, 说明就是它们的祖先
   x = p[x][k];
   y = p[y][k];
   k++;
  }
  else k--;
 }

 return x;
}


int main()
{
// freopen("input.txt","r",stdin);
 while(scanf("%d",&n) != EOF)
 {
  read_graph();
  dfs(1);

  scanf("%d",&m);
  int x, y;
  for(int i = 1; i <= m; ++i)
  {
   scanf("%d %d",&x,&y);
   printf("(%d %d) = %d\n",x,y,LCA(x,y));
  }
 }
 system("pause");
 return 0;
}