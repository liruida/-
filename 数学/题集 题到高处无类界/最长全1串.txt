#include <iostream>

#include <vector>
using namespace std;
vector<int> vec;
int main() {
    int n,k,x;
    n=0;
    k=0;
    x=0;
    cin>>n>>k;
    for(int i=1;i<=n;i++){
        cin>>x;
        
        if(x==0)
        { 
                vec.push_back(i);}
    }
    for(int i=0;i<vec.size();i++){
        cout<< vec[i];
    }
    cout<<""<<endl;
    int maxlen=0;
     maxlen=vec[k]-1;
    for(int i=k+1;i<vec.size();i++){
        int tmp=vec[i]-vec[i-k-1]-1;
        cout<<"tmp:"<<tmp;
        maxlen=max(maxlen,tmp);
        cout<<"maxlen:"<<maxlen;
    }
	cout<<maxlen<<endl;
	system("pause");
	return 0;
}
        


 #include <iostream>
#include <cstdio>
#include <vector>
using namespace std;

vector<int> vec[100];
int ans;
void dfs(int x, int old, int w) {
    for(int i=0;i<vec[x].size();i++){
        if(vec[x][i]==old){
            continue;
        }
        dfs(vec[x][i],x,w+1);
    }
    ans = max(ans, w);
}
int main() {
    int n;
    scanf("%d", &n);
    for(int i = 1; i < n; ++ i) {
        int x, y;
        scanf("%d%d", &x, &y);
        vec[x].push_back(y);
        vec[y].push_back(x);
    }
    for(int i=0;i<=n;i++){
            for(int j=0;j<vec[i].size();j++){
        cout<< vec[i][j];}
    }
    
    cout<<""<<endl;
    ans = 0;
    dfs(1, -1, 0);
    printf("%d\n", (n-1)*2-ans);
     system("pause");
    return 0;
}
   
#提交代码时，取消以下注释
##N,K = map(int,input().split())
##num = list(map(int,input().split()))

#提交代码时，删除以下代码
#[1, 0, 0, 1, 0, 1, 0, 1, 0, 1]
N = 10
K = 2
num = [1, 0, 0, 1, 1, 1, 0, 1, 0, 1]


def checkInterval(possible,sumvalue):

    startmax = N - possible
    for start in range(0,startmax+1):
        #start范围是从start到startmax
        end = start + possible
        #start和end指分片的开始与结束
        if sum(num[start:end]) >= sumvalue:
            return True
    return False


if(1 not in num):#如果数组里没有1，那么最长也就是机会个数
    print(K)
elif(K>=N-1):
    print(N)
else:
    #找出最长1的长度
    maxleng = 0
    tempmaxleng = 0
    for i in num:
        if(i == 1):
            tempmaxleng += 1
        else:
            if(tempmaxleng>maxleng):
                maxleng = tempmaxleng
            tempmaxleng = 0
    #得到了最长连续1的长度
    sumvalue = maxleng#滑动窗口求和至少为sumvalue
    possible = sumvalue+K#滑动窗口的长度至少为possible

    while(True):
        if(not checkInterval(possible,sumvalue)):
           break 
        sumvalue += 1
        possible += 1
    print(possible -1)


https://blog.csdn.net/anlian523/article/details/82498855


https://blog.csdn.net/behboyhiex/article/details/82469281

http://m.nowcoder.com/discuss/108649

https://blog.csdn.net/weixin_36448497/article/details/82468537