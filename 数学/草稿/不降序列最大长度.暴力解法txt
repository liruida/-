
求数组最小值
#include<iostream>
using namespace std;
int main(){
	int a[7]={9,0,3,6,2,4,3};
	int temp=0;
	for(int i=0;i<6;i++){
           
         if(a[i]>a[i+1]){   //i最大取6，不要越界
              temp=temp<a[i+1]?temp:a[i+1];   
              cout<<"temp： "<<temp<<endl;     
                         }   
            
            }
	cout<<"最终结果： "<<temp<<endl;
	system("pause");
	return 0;
}

#include <iostream>
using namespace std;
int main()
{
 int datas[7] = {-1, 2, 3, 4, 5, 6, 7 };
 int min = 0;

    for(int i = 0; i < 7; ++i) 
 {
  if(min > datas[i])
  {
   min = datas[i];
  }
  
 }

 cout << min << endl; 

system("pause");
 
    return 0;
}

输入
6
9 3 6 6 2 7
输出
4
含义：
6个数，不降序列有9； 3 6 6 7；2 7；3 6；......其中不降序列最长长度为4，即是3 6 6 7

解法：
9 3 6 6 2 7
先初始化一个与数组等长的记录数组P[n],初始为1，表示开始最长序列均为自身。寻找3之前比其小或等的数，同时要注意比较P[1](P[j])是否小于或等于之前(P[K])P[0]~P[1]的数。例如数组为 9 6 3 2 7时，不比较P[k],会输出3（6,3,2）变成寻找比7小的数有几个的问题。若比较了，则：
数组arr[j] : 9 6 3 2 7
P[K]初始值： 1 1 1 1 1
P[K]变化值： 1 1 1 1 2
return 2
2！=1（3处的1，说明3大于它前边的数为0，此时可取的序列为6 7，或3 7，但不可同时取 63。）
分析认为P[j]不会小于(P[K]),所以只需判断是否相等即可。
极端例子：
8 9 6 100 2 99
1 1 1  1  1 1
1 2 1  3  1 3
99处P[K]不会小于100处P[K]

可见P[]数组的状态记录（含递推关系，反应了后来者的先行状态）是由查数组各个数前面比它小的数有几个的问题加上约束小的数序列要求不降的升级后的新问题的解决关键――状态约束数组。


#include<iostream>
using namespace std;
int main(){
	int arr[50];
	int p[50];
	int i,max = 0;
	cin>>i;
	
	for(int j=0;j<i;j++){
		cin>>arr[j];
		p[j] = 1;
	}

	for(int j=1;j<i;j++){
		for(int k=0;k<j;k++){
                       if(arr[j]>=arr[k]&&p[j]<=p[k]){
				p[j] = p[k]+1;
			        max = max>p[j]?max:p[j];
			}
		}
	}
	cout<<"最终结果： "<<max<<endl;
	system("pause");
	return 0;
}
参考链接
https://blog.csdn.net/kesonyk/article/details/51357126

寻找数组每个数后面比其大的数，类似于选择排序排好序位置之后的每次往后找最小值。时间复杂度大于动态规划。

动态规划 选择教室 https://www.jianshu.com/p/2bf90309467b 

字符串合法性：
https://blog.csdn.net/weixin_39427526/article/details/77109746

https://blog.csdn.net/wickedvalley/article/details/72841303

https://blog.csdn.net/NichChen/article/details/79688493
