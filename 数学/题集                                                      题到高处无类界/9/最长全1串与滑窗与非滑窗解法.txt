给你一个01字符串，答案=该串中最长的连续的1的长度，现在你有至多K次机会，每次机会可以将串中的某个0改成1，现在问最大的可能答案。
 
样例输入： 
10 2 
1 0 0 1 0 1 0 1 0 1 
样例输出： 
5 

非滑窗：

思路：遍历这n个数，将为0 的 push进vec，只考虑vec
初始最长maxlen为vec[k]-1,vec[k]表示第k+1个0所在位置，vec[k]-1就是初始最大长度，vec[i]-vec[i-k-1]-1 就是将i-k-1到i之间0变为1的长度

#include <iostream>

#include <vector>
using namespace std;
vector<int> vec;
int main() {
    int n,k,x;
    n=0;
    k=0;
    x=0;
    cin>>n>>k;
    for(int i=1;i<=n;i++){
        cin>>x;
        
        if(x==0)
        { 
                vec.push_back(i);}
    }
    for(int i=0;i<vec.size();i++){
        cout<< vec[i];
    }
    cout<<""<<endl;
    int maxlen=0;
     maxlen=vec[k]-1;
    for(int i=k+1;i<vec.size();i++){
        int tmp=vec[i]-vec[i-k-1]-1;
        cout<<"tmp:"<<tmp;
        maxlen=max(maxlen,tmp);
        cout<<"maxlen:"<<maxlen;
    }
	cout<<maxlen<<endl;
	system("pause");
	return 0;
}
        
//https://blog.csdn.net/behboyhiex/article/details/82469281



解法二：
滑窗（分片）：

思路
输入的数组里没有1，那么返回K即机会次数。 
输入的数组有1，且K>=N-1，那么返回N。

 
输入的数组有1，且K小于N-1： 
那么返回的值，至少应该是1+K.
想象有个1+K宽度的窗口，在数组上滑动，在某一次滑动时，窗口内有1个1，K个0，这样就用掉K次机会，把窗口内的0都变成1，就形成了连续1串。 
进一步说（考虑已有1串），如果数组已有的最长连续1子串的长度为max，那么返回的值至少为max+K。



程序的整体思路为： 
滑动窗口slide初始大小为max+K。即slide = max+K。 
滑动窗口下1的总和sum初始大小为max。即sum = max。
循环每次检测，当前大小为slide 的滑动窗口，是否有一次滑动使得总和>=sum。 
有，说明返回结果至少为slide，但还有可能更大，所以slide和sum都++。 
没有，说明返回结果应该为slide-1，停止循环。



如果输入的数组有1，且K小于N-1：数组已有的最长连续1子串的长度为max，那么返回的值至少为max+K。用sum(num[start:end])求max，与原max比较，代替了更改数组值，大于等于，则表示返回结果至少为max+K，但还有可能更大，所以max+K和max都++，不断更新max+K，直到没有大于等于，说明返回结果应该为max+K-1，即所求。效果同，更简洁。如 111 max=3，K=2 max+K=5，去寻找有没有1110 1101类型的 如11010 11011，如发现了（和与max比），扩展max+K=6 max=4，找有没有 010111 110111类型的，是利用了可修改K次的漏洞，要目的明确。一般的，当序列给出，K大小给出，寻找几次就会确定了，探求本质，然后加数据结构实现，即为算法。
例：
i：  0  1  2  3  4  5  6  7  8  9
 
num：1, 0, 0, 1, 1, 1, 0, 1, 0, 1
p=3+2=5 s=3
startmax=10-5=5
start:end => 0 5
             1 6
             ...
             5 10
sum(num[start:end]) (从start加到end-1)  即1+0+0+1+1=3>=3 返回T,if为F，不执行

p=6 s=4
startmax=10-6=4
start:end => 0 6
             1 7
             ...
             4 10
sum(num[start:end])   即1+0+0+1+1+1=4>=4 返回T,if为F，不执行

p=7 s=5
startmax=10-7=3
start:end => 0 7
             1 8
             ...
             3 10
sum(num[start:end])   即1+0+0+1+1+1+0=4
                        0+0+1+1+1+0+1=4 
                        0+1+1+1+0+1+0=4    
                        1+1+1+0+1+0+1=5>=5 返回T,if为F，不执行

p=8 s=6
startmax=10-7=3
start:end => 0 8
             1 9
             2 10
sum(num[start:end])   即1+0+0+1+1+1+0+1=5
                        0+0+1+1+1+0+1+0=5
                        0+1+1+1+0+1+0+1=5 <6                返回F,if为T，执行break跳出while，输出possible--；



N = 10
K = 2
num = [1, 0, 0, 1, 1, 1, 0, 1, 0, 1]


def checkInterval(possible,sumvalue):

    startmax = N - possible
    for start in range(0,startmax+1):
        #start范围是从start到startmax
        end = start + possible
        #start和end指分片的开始与结束
        if sum(num[start:end]) >= sumvalue:
            return True
    return False


if(1 not in num):#如果数组里没有1，那么最长也就是机会个数
    print(K)
elif(K>=N-1):
    print(N)
else:
    #找出最长1的长度
    maxleng = 0
    tempmaxleng = 0
    for i in num:
        if(i == 1):
            tempmaxleng += 1
        else:
            if(tempmaxleng>maxleng):
                maxleng = tempmaxleng
            tempmaxleng = 0
    #得到了最长连续1的长度
    sumvalue = maxleng#滑动窗口求和至少为sumvalue
    possible = sumvalue+K#滑动窗口的长度至少为possible

    while(True):
        if(not checkInterval(possible,sumvalue)):
           break 
        sumvalue += 1
        possible += 1
    print(possible -1)


//https://blog.csdn.net/anlian523/article/details/82498855




美团点评2019秋招机器学习算法工程师笔试题分享： http://m.nowcoder.com/discuss/108649

https://blog.csdn.net/weixin_36448497/article/details/82468537