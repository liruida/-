问题描述：

有一个M*N的二维球场看台，已知同一个球迷群体的球迷会选择相邻座位，不同球迷群体的球迷选择不相邻的座位。给定座位选择矩阵（0表示未选择，1表示已选择），要求找出球迷群体的个数以及最大的球迷群体的人数。

（相邻包括前后、左右相邻）

以下算法采取递归与回溯，回溯时借助了状态数组记录，此处可继续优化，改原数组值记录，并用一个数sum的遍历过程中，sum遇到1改原值1为2，然后+1，回溯；遇0不变；遇2则sum-1。遍历结束，sum值为集群个数。从而简化程序提高空间复杂度与时间复杂度。而其中的状态记录思想与回溯递归是不变的。

#include <iostream>
#include<vector>
using namespace std; 
using std::vector;
class Solution 
{
    public:
        int iszero(int matrix[],int (&flags)[12],int x,int y,int rows, int cols)
    {
       
        if(x<0 || x>=rows || y<0 || y>=cols){ //越界的点
            return 0; 
           }      
        
         
 
        if(flags[x*cols+y]==0&&matrix[x*cols+y]== 1 )//0表示未被访问 
        {
            int n=1;                                     
           flags[x*cols+y]=1;
        
            n+=iszero(matrix,flags,x,y-1,rows,cols) +
                iszero(matrix,flags,x-1,y,rows,cols)+
                iszero(matrix,flags,x,y+1,rows,cols)+
                iszero(matrix,flags,x+1,y,rows,cols);           
           
                      
            return n;             
        } else{
            flags[x*cols+y]=1;
            return 0;   
        }          
        
 }
 
      int hasPath(int  matrix[], int rows, int cols,int *condition,int *sum)
    {
         
       int flags[12]={0};
     
        
        for(int i=0;i<rows;i++)
            for(int j=0;j<cols;j++)
            {
             int temp=0;
              temp=iszero(matrix,flags,i,j,rows,cols) ;
              
            
              cout <<"temp:"<<temp << endl;
                       system("pause"); 
              
                      
              if(temp>0){
                         
                    (*condition)++; 
                     cout <<"*condition:"<<*condition << endl;   
                     if(temp>*sum){*sum=temp;}
                     cout <<"*sum:"<<*sum << endl;  
                         }  
            }
       return 0;      
    }

   
};
 
int main()
{
   int num=0;
    int length=0;
   
    int matrix[]={0,0,1,1,0,0,1,1,1,0,0,1};
    Solution  M;        
   int condition=0;
   int sum=0;
   M. hasPath(matrix,3,4,&condition,&sum); 
      cout << *(&condition) << endl;
      cout << *(&sum) << endl;
      system("pause");
      
    return 0;
}



java 代码：
package a;

public class map {
	
	public int iszero(int matrix[],int flags[],int x,int y,int rows, int cols)
    {
       
        if(x<0 || x>=rows || y<0 || y>=cols){ //越界的点
            return 0; 
           }      
        
         
 
        if(flags[x*cols+y]==0&&matrix[x*cols+y]== 1 )//0表示未被访问 
        {
            int n=1;                                     
           flags[x*cols+y]=1;
        
            n+=iszero(matrix,flags,x,y-1,rows,cols) +
                iszero(matrix,flags,x-1,y,rows,cols)+
                iszero(matrix,flags,x,y+1,rows,cols)+
                iszero(matrix,flags,x+1,y,rows,cols);           
           
                      
            return n;             
        } else{
            flags[x*cols+y]=1;
            return 0;   
        }          
        
 }
 
      int hasPath(int  matrix[], int rows, int cols,int condition,int sum)
    {
         
       int flags[]=new int[12];
       for(int i=0;i<12;i++){
    	   flags[i]=0;
       }
     
        
        for(int i=0;i<rows;i++)
            for(int j=0;j<cols;j++)
            {
             int temp=0;
              temp=iszero(matrix,flags,i,j,rows,cols) ;
             if(temp>0){
                         
                    condition++; 
                     
                     if(temp>sum){sum=temp;}
                     
                         }  
            }
        System.out.println(condition);
        System.out.println(sum);
       return 0;      
    }

   
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int num=0;
	    int length=0;
	   
	    int matrix[]={0,0,1,1,0,0,1,1,1,0,0,1};
	  
	    map m = new map();       
	   int condition=0;
	   int sum=0;
	   m.hasPath(matrix,3,4,condition,sum); 
	  
	      
	   
	}

}





condition  sum  传引用简化
#include <iostream>
#include<vector>
using namespace std; 
using std::vector;
class Solution 
{
    public:
        int iszero(int matrix[],int (&flags)[12],int x,int y,int rows, int cols)
    {
       
        if(x<0 || x>=rows || y<0 || y>=cols){ //越界的点
            return 0; 
           }      
        
         
 
        if(flags[x*cols+y]==0&&matrix[x*cols+y]== 1 )//0表示未被访问 
        {
            int n=1;                                     
           flags[x*cols+y]=1;
        
            n+=iszero(matrix,flags,x,y-1,rows,cols) +
                iszero(matrix,flags,x-1,y,rows,cols)+
                iszero(matrix,flags,x,y+1,rows,cols)+
                iszero(matrix,flags,x+1,y,rows,cols);           
           
                      
            return n;             
        } else{
            flags[x*cols+y]=1;
            return 0;   
        }          
        
 }
 
      int hasPath(int  matrix[], int rows, int cols,int &condition,int &sum)
    {
         
       int flags[12]={0};
     
        
        for(int i=0;i<rows;i++)
            for(int j=0;j<cols;j++)
            {
             int temp=0;
              temp=iszero(matrix,flags,i,j,rows,cols) ;
              
            
              cout <<"temp:"<<temp << endl;
                       system("pause"); 
              
                      
              if(temp>0){
                         
                    condition++; 
                     cout <<"condition:"<<condition << endl;   
                     if(temp>sum){sum=temp;}
                     cout <<"sum:"<<sum << endl;  
                         }  
            }
       return 0;      
    }

   
};
 
int main()
{
   int num=0;
    int length=0;
   
    int matrix[]={0,0,1,1,0,0,1,1,1,0,0,1};
    Solution  M;        
   int condition=0;
   int sum=0;
   M. hasPath(matrix,3,4,condition,sum); 
      cout << condition << endl;
      cout << sum << endl;
      system("pause");
      
    return 0;
}













