http://www.cnblogs.com/BlueTzar/articles/1223313.html

https://blog.csdn.net/zzwdkxx/article/details/53409803

深拷贝：
#include <iostream>
using namespace std;
class CA
{
public:
CA(int b,char* cstr)
{
a=b;
str=new char[b];
strcpy(str,cstr);
}
CA(const CA& C){
a=C.a;
str=new char[a]; //深拷贝
if(str!=0)
strcpy(str,C.str);
}
void Show(){
cout<<str<<endl;
}
~CA()
{
delete str;
}
private:
int a;
char *str;
};

int main()
{
CA A(10,"Hello!");
CA B=A;
B.Show();
return 0;
} 

拷贝构造函数：

拷贝构造函数自己的参数必须是引用类型？ 
答案是肯定的，如若不是本参数的引用类型，则会造成死循环，无限递归。因为函数调用过程为：复制构造函数，其实也是一个函数，如果你给它定义的参数，是一个类型，而不是一个类型的引用，它会首先调用该参数的类型的复制构造函数，重新构造一个新的实例，而参数类型的构造函数就是我们刚刚定义的复制构造函数，这样便造成了递归。 
例子：

/拷贝构造  
 CExample(const CExample& C)  
 {  
  a = C.a;  
 }  

 CExample A(100);  
CExample B = A;  

拷贝的过程： 
（1）A对象传入形参时，会先会产生一个临时变量，就叫 C 吧。 
(2).然后调用拷贝构造函数把A的值给C。 整个这两个步骤有点像：CExample C(A); 
(3).等拷贝函数执行完后, 析构掉 C 对象。 
如参数类型不是引用类型，拷贝构造函数传递参数时又会调用拷贝构造函数，造成指针循环调用。

#include <iostream>  
using namespace std;  
  
class A  
{  
private:  
    int a;  
public:  
    A(int i){a=i;}  //内联的构造函数  
    A(A &aa);  
    int geta(){return a;}  
    A get_a() ;
};  
  
A::A(A &aa)     //拷贝构造函数  
{  
    a=aa.a+98;  
    cout<<"拷贝构造函数执行！"<<endl;  
}  
  
int get_a(A aa)     //参数是对象，是值传递，会调用拷贝构造函数  
{  
    return aa.geta();  
}  
  
int get_a_1(A &aa)  //如果参数是引用类型，本身就是引用传递，所以不会调用拷贝构造函数  
{  
    return aa.geta();  
}  
  
A get_a(int n)       //返回值是对象类型，会调用拷贝构造函数。会调用拷贝构造函数，因为函数体内生成的对象aa是临时的，离开这个函数就消失了。所有会调用拷贝构造函数复制一份。  
{  
    A aa(n);  
    return aa;  
}  
  
A get_A_1()    //会调用拷贝构造函数，因为函数体内生成的对象aa是临时的，离开这个函数就消失了。所有会调用拷贝构造函数复制一份。  
{  
    A aa(1);  
    return aa;  
}  
  
int main()  
{ 
     
    A a1(1);  
    A b1(a1);           //用a1初始化b1，调用拷贝构造函数  
    A c1=a1;            //用a1初始化c1，调用拷贝构造函数  
  
    int i=get_a(a1);        //函数形参是类的对象，调用拷贝构造函数  
    int j=get_a_1(a1);      //函数形参类型是引用，不调用拷贝构造函数  
  cout << i << endl;
      cout << j << endl;
      system("pause");
   // A d1=get_a(3); 
   A e(199);      //调用拷贝构造函数  
   e=get_A_1();     //调用拷贝构造函数  
  
    return 0;  
}  



 




#include <iostream>
using namespace std;
class Point     //Point 类的定义
{
public:
    Point(int xx=0, int yy=0)
    {
        x = xx;    //构造函数，内联
        y = yy;
    }
    Point(const Point& p); //复制构造函数
    void setX(int xx)
    {
        x=xx;
    }
    void setY(int yy)
    {
        y=yy;
    }
    int getX() const
    {
        return x;    //常函数（第5章）
    }
    int getY() const
    {
        return y;    //常函数（第5章）
    }
private:
    int x, y; //私有数据
};
//成员函数的实现
Point::Point (const Point& p)
{
    x = p.x;
    y = p.y;
    cout << "Calling the copy constructor " << endl;
}
 
//形参为Point类对象的函数
void fun1(Point p)
{
    cout << p.getX() << endl;
}
//返回值为Point类对象的函数
Point fun2()
{
    Point a(1, 2);
    return a;
}
 
//主程序
int main()
{
    Point a(4, 5);	//第一个对象A
    Point b = a;	//情况一，用A初始化B。第一次调用复制构造函数
    cout << b.getX() << endl;
    fun1(b);	//情况二，对象B作为fun1的实参。第二次调用复制构造函数
    b = fun2();	//情况三，函数的返回值是类对象，函数返回时调用复制构造函数
    cout << b.getX() << endl;
     system("pause");
    return 0;
}





