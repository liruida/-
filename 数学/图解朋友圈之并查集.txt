输入：
5
2 3 0
3 0
2 0
5 0
4 0
输出：
2


含义：
共5个人，第二（2-1）行表示  1认识2， 3和他自己 ；第三行表示 2认识 3和他自己......；若1认识2,2认识3，可理解1认识3，输出2，表示123,45有这两个朋友圈。

由最终数组 -1 -3 1 1 -2 4 的-3 -2可知两个朋友圈的数量为3 ，2 。


#include <iostream>
#include <vector>
#include <algorithm>
#include<sstream>       
#include<string> 
#define MAX 100
using namespace std;
typedef vector<pair<int, int> > RangeList;
class UnionSet
{
public:
    UnionSet(int n )
    {
        memset(_set, -1, sizeof(int)*(n+1));
        _n = n;
    }
    int GetRoot(int p)
    {
        while (_set[p] >= 0) //最终的根应该小于0
        {
            p = _set[p];
            cout <<p<<"p"<<endl;
        }
        
        return p;
    }

    void UnionFriends(int p1, int p2)
    {
        //获取p1和p2最终属于哪个朋友圈
        int root1 = GetRoot(p1);
        int root2 = GetRoot(p2);
        cout <<root1<< ";" <<root2<<endl;
        //将本该属于同一个朋友圈的两个朋友圈合并
        if (root1 != root2)
        {
            _set[root1] = _set[root1] + _set[root2];
            _set[root2] = root1;
        }
    }
    int friends(int n, int m, RangeList& r)
    {
        int count = 0; //朋友圈的个数

        //合并朋友圈
        for (int i = 0; i < m; i++)
        {
            UnionFriends(r[i].first, r[i].second);
        }

        //计算朋友圈个数
        for (int i = 1; i < n + 1; i++)  //跳过0号下标，没有第0个人
        {
            cout <<i<< "：" << _set[i]<<endl;
            if (_set[i] < 0)
                count++;
        }
        return count;
    }
private:

    int _set[MAX];
    int _n;
};



int  main()
{
     RangeList intervals;
     int n, start, end;
     cin>>n;
     for(int i=0;i<=n;i++){
             string s;
             getline(cin, s);//读一行字符串 遇到换行符才结束
             istringstream is (s);
             int inter;
             while (is >> inter ){ 
                    if(inter==0){inter=i;}
                    start = i ;
                    end = inter;
                    
                    intervals.push_back(make_pair(start, end));
                   
                   }
             
             }
     int m=intervals.size();
      cout << "m：" << m << endl;
       for (int i = 0; i < intervals.size(); ++i){
        cout << intervals[i].first << ' ' << intervals[i].second << endl;
    cout << endl;
     system("pause");
}
   
    UnionSet us(n);
    int ret = us.friends(n, m, intervals);
    cout << "朋友圈的个数：" << ret << endl;
    system("pause");
}




参考链接：
//https://blog.csdn.net/yangrujing/article/details/51868630

//https://blog.csdn.net/liangzhaoyang1/article/details/50973383

//https://blog.csdn.net/kirito_j/article/details/51778229

#include<iostream>
using namespace std;

class UnionSet
{
public:
    UnionSet(int n = 6)
    {
        memset(_set, -1, sizeof(int)*6);
        _n = n;
    }
    int GetRoot(int p)
    {
        while (_set[p] >= 0) //最终的根应该小于0
        {
            p = _set[p];
        }
        return p;
    }

    void UnionFriends(int p1, int p2)
    {
        //获取p1和p2最终属于哪个朋友圈
        int root1 = GetRoot(p1);
        int root2 = GetRoot(p2);
        //将本该属于同一个朋友圈的两个朋友圈合并
        if (root1 != root2)
        {
            _set[root1] = _set[root1] + _set[root2];
            _set[root2] = root1;
        }
    }
    int friends(int n, int m, int r[][2])
    {
        int count = 0; //朋友圈的个数

        //合并朋友圈
        for (int i = 0; i < m; i++)
        {
            UnionFriends(r[i][0], r[i][1]);
        }

        //计算朋友圈个数
        for (int i = 1; i < n + 1; i++)  //跳过0号下标，没有第0个人
        {
            if (_set[i] < 0)
                count++;
        }
        return count;
    }
private:
    int _set[6];
    int _n;
};



int  main()
{
    int n = 5; //5人
    int m = 3; //三对好友关系
    int r[3][2] = { { 1, 2 }, { 2, 3 }, { 4, 5 } };
    UnionSet us;
    int ret = us.friends(n, m, r);
    /*UnionSet *us=new UnionSet (n);
   
    int ret = us->friends(n, m, intervals);*/
    cout << "朋友圈的个数：" << ret << endl;
    system("pause");
}









#include <iostream>
#include <vector>
#include <algorithm>
#include<sstream>       
#include<string> 

using namespace std;
typedef vector<pair<int, int> > RangeList;
class UnionSet
{
public:
     ~UnionSet()
{
  delete _set;
}  
    UnionSet(int n )
    {
        _set=new int[n+1];
       for (int i = 0; i < n+1; i++)
        {
            _set[i]=-1;
        }
        
        _n = n;
    }
    int GetRoot(int p)
    {
        while (_set[p] >= 0) //最终的根应该小于0
        {
            p = _set[p];
            cout <<p<<"p"<<endl;
        }
        
        return p;
    }

    void UnionFriends(int p1, int p2)
    {
        //获取p1和p2最终属于哪个朋友圈
        int root1 = GetRoot(p1);
        int root2 = GetRoot(p2);
        cout <<root1<< ";" <<root2<<endl;
        //将本该属于同一个朋友圈的两个朋友圈合并
        if (root1 != root2)
        {
            _set[root1] = _set[root1] + _set[root2];
            _set[root2] = root1;
        }
    }
    int friends(int n, int m, RangeList& r)
    {
        int count = 0; //朋友圈的个数

        //合并朋友圈
        for (int i = 0; i < m; i++)
        {
            UnionFriends(r[i].first, r[i].second);
        }

        //计算朋友圈个数
        for (int i = 1; i < n + 1; i++)  //跳过0号下标，没有第0个人
        {
            cout <<i<< "：" << _set[i]<<endl;
            if (_set[i] < 0)
                count++;
        }
        return count;
    }
private:

    int *_set;
    int _n;
    
};



int  main()
{
     RangeList intervals;
     int n, start, end;
     cin>>n;
     for(int i=0;i<=n;i++){
             string s;
             getline(cin, s);//读一行字符串 遇到换行符才结束
             istringstream is (s);
             int inter;
             while (is >> inter ){ 
                    if(inter==0){inter=i;}
                    start = i ;
                    end = inter;
                    
                    intervals.push_back(make_pair(start, end));
                   
                   }
             
             }
     int m=intervals.size();
      cout << "m：" << m << endl;
       for (int i = 0; i < intervals.size(); ++i){
        cout << intervals[i].first << ' ' << intervals[i].second << endl;
    cout << endl;
     system("pause");
}
    /*int n = 5; //5人
    int m = 4; //三对好友关系
    int r[4][2] = { { 1, 2 }, { 2, 3 }, { 3, 4 },{ 4, 5 } };*/
    UnionSet *us=new UnionSet (n);
   
    int ret = us->friends(n, m, intervals);
    cout << "朋友圈的个数：" << ret << endl;
    system("pause");
}